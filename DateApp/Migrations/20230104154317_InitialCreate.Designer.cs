// <auto-generated />
using System;
using App.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230104154317_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Api.Entities.UserLike", b =>
                {
                    b.Property<int>("UserIdLike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserIdLike"));

                    b.Property<string>("LikedByUserUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LikedToUserUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserIdLike");

                    b.HasIndex("LikedByUserUserId");

                    b.HasIndex("LikedToUserUserId");

                    b.ToTable("UserLikes");
                });

            modelBuilder.Entity("Api.Entities.UserMessage", b =>
                {
                    b.Property<int>("IdMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMessage"));

                    b.Property<string>("ByUserMessageUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserMessageUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdMessage");

                    b.HasIndex("ByUserMessageUserId");

                    b.HasIndex("ToUserMessageUserId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("Api.Entities.UserPost", b =>
                {
                    b.Property<int>("UserPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPostId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromUserUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserPostId");

                    b.HasIndex("FromUserUserId");

                    b.ToTable("UserPosts");
                });

            modelBuilder.Entity("Api.Entities.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Api.Entities.UserLike", b =>
                {
                    b.HasOne("Api.Entities.UserProfile", "LikedByUser")
                        .WithMany()
                        .HasForeignKey("LikedByUserUserId");

                    b.HasOne("Api.Entities.UserProfile", "LikedToUser")
                        .WithMany()
                        .HasForeignKey("LikedToUserUserId");

                    b.Navigation("LikedByUser");

                    b.Navigation("LikedToUser");
                });

            modelBuilder.Entity("Api.Entities.UserMessage", b =>
                {
                    b.HasOne("Api.Entities.UserProfile", "ByUserMessage")
                        .WithMany("SendedMessages")
                        .HasForeignKey("ByUserMessageUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Api.Entities.UserProfile", "ToUserMessage")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ToUserMessageUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ByUserMessage");

                    b.Navigation("ToUserMessage");
                });

            modelBuilder.Entity("Api.Entities.UserPost", b =>
                {
                    b.HasOne("Api.Entities.UserProfile", "FromUser")
                        .WithMany("PostsUser")
                        .HasForeignKey("FromUserUserId");

                    b.Navigation("FromUser");
                });

            modelBuilder.Entity("Api.Entities.UserProfile", b =>
                {
                    b.Navigation("PostsUser");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SendedMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
